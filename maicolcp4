import json
from datetime import datetime, timedelta

class Camper:
    def __init__(self, num_id, nombre, apellidos, direccion, acudiente, celular, fijo, riesgo, ruta, estado='Inscrito'):
        self.NumId = num_id
        self.Nombre = nombre
        self.Apellidos = apellidos
        self.Direccion = direccion
        self.Acudiente = acudiente
        self.Celular = celular
        self.Fijo = fijo
        self.Riesgo = riesgo
        self.Ruta = ruta
        self.Estado = estado

    def __str__(self):
        return f"{self.NumId}: {self.Nombre} {self.Apellidos} - Estado: {self.Estado}"

class Trainer:
    def __init__(self, nombre, apellidos, rutas_asignadas):
        self.Nombre = nombre
        self.Apellidos = apellidos
        self.RutasAsignadas = rutas_asignadas

    def __str__(self):
        return f"{self.Nombre} {self.Apellidos} - Rutas Asignadas: {', '.join(self.RutasAsignadas)}"

def capturar_datos_camper(campers, rutas_ocupadas):
    print("Eres Un Camper, Ingresa Tus Datos:")
    print("---Menú Camper---")
    
    try:
        NumId = int(input("Ingrese su número de identificación sin puntos ni comas: "))
        
        if any(camper.NumId == NumId for camper in campers.values()):
            print("Error: El número de identificación ingresado ya está en uso. Por favor ingrese otro.")
            return None

        Nombre = input("Ingrese sus nombres: ")
        Apellidos = input("Ingrese sus apellidos: ")
        Direccion = input("Ingrese su dirección: ")
        Acudiente = input("Ingrese el nombre de su acudiente: ")
        Celular = input("Ingrese su número de celular: ")
        Fijo = input("Ingrese su número de teléfono fijo: ")
        Riesgo = input("Ingrese el nivel de riesgo: ")
        Ruta = input("Ingrese la ruta de entrenamiento a la cual aspira (NodeJS, Java, NetCore): ").lower()

        while Ruta not in ["nodejs", "java", "netcore"]:
            print("Ruta de entrenamiento no válida. Por favor ingrese una de las opciones disponibles.")
            Ruta = input("Ingrese la ruta de entrenamiento (NodeJS, Java, NetCore): ").lower()

        if Ruta == "nodejs":
            print("La ruta de entrenamiento", Ruta, "tiene los siguientes temas.\n",
                  "-Introduccion a NodeJs\n",
                  "-Programacion orientada a objetos\n",
                  "-Especializacion en NodeJs\n"
                  )
        elif Ruta == "java":
            print("La ruta de entrenamiento", Ruta, "tiene los siguientes temas.\n"
                  "-Introduccion a java\n "
                  "-Programacion orientada a objetos\n"
                  "-Especializacion en Java\n"
                  )
        else:
            print("La ruta de entrenamiento", Ruta, "tiene los siguientes temas\n."
                  "-Introduccion a NetCore\n "
                  "-Programacion orientada a objetos\n"
                  "-Especializacion en NetCore\n"
                  )

        if Ruta in rutas_ocupadas and rutas_ocupadas[Ruta] >= 33:
            print("Lo siento, la ruta", Ruta, "ya ha alcanzado el máximo de 33 campers inscritos.")
            return None

        rutas_ocupadas[Ruta] = rutas_ocupadas.get(Ruta, 0) + 1

        nuevo_camper = Camper(NumId, Nombre, Apellidos, Direccion, Acudiente, Celular, Fijo, Riesgo, Ruta)
        print("Datos del camper ingresados correctamente.")
        return nuevo_camper
    except ValueError:
        print("Error: Por favor ingrese un valor numérico válido para el número de identificación.")
        return None

def modificar_camper(camper):
    print("Modificar datos del camper:")
    print("1. Modificar número de identificación")
    print("2. Modificar nombres")
    print("3. Modificar apellidos")
    print("4. Modificar dirección")
    print("5. Modificar acudiente")
    print("6. Modificar número de celular")
    print("7. Modificar número de teléfono fijo")
    print("8. Modificar nivel de riesgo")
    print("9. Modificar ruta de entrenamiento")
    
    try:
        opcion = int(input("Ingrese el número de la opción que desea modificar: "))
        
        if opcion == 1:
            camper.NumId = int(input("Ingrese el nuevo número de identificación: "))
        elif opcion == 2:
            camper.Nombre = input("Ingrese los nuevos nombres: ")
        elif opcion == 3:
            camper.Apellidos = input("Ingrese los nuevos apellidos: ")
        elif opcion == 4:
            camper.Direccion = input("Ingrese la nueva dirección: ")
        elif opcion == 5:
            camper.Acudiente = input("Ingrese el nuevo acudiente: ")
        elif opcion == 6:
            camper.Celular = input("Ingrese el nuevo número de celular: ")
        elif opcion == 7:
            camper.Fijo = input("Ingrese el nuevo número de teléfono fijo: ")
        elif opcion == 8:
            camper.Riesgo = input("Ingrese el nuevo nivel de riesgo: ")
        elif opcion == 9:
            nueva_ruta = input("Ingrese la nueva ruta de entrenamiento (NodeJS, Java, NetCore): ").lower()
            while nueva_ruta not in ["nodejs", "java", "netcore"]:
                print("Ruta de entrenamiento no válida. Por favor ingrese una de las opciones disponibles.")
                nueva_ruta = input("Ingrese la ruta de entrenamiento (NodeJS, Java, NetCore): ").lower()
            camper.Ruta = nueva_ruta
        else:
            print("Opción no válida")
    except ValueError:
        print("Error: Por favor ingrese un número entero válido para la opción.")

def buscar_camper(campers, num_id):
    if any(camper.NumId == num_id for camper in campers.values()):
        return next(camper for camper in campers.values() if camper.NumId == num_id)
    else:
        return "Camper no encontrado."

def evaluar_camper(campers):
    num_id = int(input("Ingrese el número de identificación del camper que desea evaluar: "))
    if any(camper.NumId == num_id for camper in campers.values()):
        nota_teorica = float(input("Ingrese la nota de la prueba teórica: "))
        nota_practica = float(input("Ingrese la nota de la prueba práctica: "))
        nota_quices_trabajos = float(input("Ingrese la nota de los quices/trabajos: "))
        
        nota_final = (nota_teorica * 0.3) + (nota_practica * 0.6) + (nota_quices_trabajos * 0.1)
        
        if nota_final >= 60:
            camper.Estado = "Aprobado"
            print(f"¡Felicidades! El camper ha aprobado el módulo con una nota final de {nota_final}")
        else:
            camper.Estado = "Reprobado"
            print(f"El camper no ha aprobado el módulo. Su nota final es {nota_final}")
    else:
        print("Camper no encontrado.")

def menu_trainer(campers):
    while True:
        print("\n---Menú Trainer---")
        print("1. Ver datos de un camper")
        print("2. Evaluar un camper")
        print("3. Volver al menú principal")
        
        opcion = int(input("Ingrese el número de la opción que desea realizar: "))
        
        if opcion == 1:
            num_id = int(input("Ingrese el número de identificación del camper que desea ver: "))
            if any(camper.NumId == num_id for camper in campers.values()):
                print("Datos del camper:")
                print(buscar_camper(campers, num_id))
            else:
                print("Camper no encontrado.")
        elif opcion == 2:
            evaluar_camper(campers)
        elif opcion == 3:
            break
        else:
            print("Opción no válida. Por favor ingrese una opción válida.")

def menu_coordinador(campers):
    while True:
        print("\n---Menú Coordinador---")
        print("1. Ver datos de un camper")
        print("2. Evaluar un camper")
        print("3. Modificar datos de un camper")
        print("4. Reportes")
        print("5. Salir")
        
        opcion = int(input("Ingrese el número de la opción que desea realizar: "))
        
        if opcion == 1:
            num_id = int(input("Ingrese el número de identificación del camper que desea ver: "))
            if any(camper.NumId == num_id for camper in campers.values()):
                print("Datos del camper:")
                print(buscar_camper(campers, num_id))
            else:
                print("Camper no encontrado.")
        elif opcion == 2:
            evaluar_camper(campers)
        elif opcion == 3:
            num_id = int(input("Ingrese el número de identificación del camper que desea modificar: "))
            if any(camper.NumId == num_id for camper in campers.values()):
                modificar_camper(next(camper for camper in campers.values() if camper.NumId == num_id))
                print("Datos del camper modificados correctamente.")
            else:
                print("Camper no encontrado.")
        elif opcion == 4:
            menu_reportes(campers)
        elif opcion == 5:
            break
        else:
            print("Opción no válida. Por favor ingrese una opción válida.")

def menu_reportes(campers):
    while True:
        print("\n---Módulo de Reportes---")
        print("1. Listar campers inscritos")
        print("2. Listar campers que aprobaron el examen inicial")
        print("3. Listar campers con bajo rendimiento")
        print("4. Listar entrenadores trabajando con CampusLands")
        print("5. Listar campers y trainers asociados a una ruta de entrenamiento")
        print("6. Mostrar número de campers que aprobaron y perdieron cada módulo")
        print("7. Volver al menú principal")
        
        opcion = int(input("Ingrese el número de la opción que desea realizar: "))
        
        if opcion == 1:
            listar_campers_inscritos(campers)
        elif opcion == 2:
            listar_campers_aprobados(campers)
        elif opcion == 3:
            listar_campers_bajo_rendimiento(campers)
        elif opcion == 4:
            listar_entrenadores_campuslands(campers)
        elif opcion == 5:
            listar_campers_trainers_ruta(campers)
        elif opcion == 6:
            mostrar_aprobados_perdidos(campers)
        elif opcion == 7:
            break
        else:
            print("Opción no válida. Por favor ingrese una opción válida.")

def guardar_campers_json(campers):
    with open('campers.json', 'w') as archivo_json:
        campers_dict = {camper.NumId: camper.__dict__ for camper in campers.values()}
        json.dump(campers_dict, archivo_json)

def cargar_campers_json():
    try:
        with open('campers.json', 'r') as archivo_json:
            campers_dict = json.load(archivo_json)
            return {num_id: Camper(**datos) for num_id, datos in campers_dict.items()}
    except FileNotFoundError:
        return {}

def listar_campers_inscritos(campers):
    campers_inscritos = [camper for camper in campers.values() if camper.Estado == 'Inscrito']
    if campers_inscritos:
        print("Campers inscritos:")
        for camper in campers_inscritos:
            print(camper)
    else:
        print("No hay campers inscritos.")

def listar_campers_aprobados(campers):
    campers_aprobados = [camper for camper in campers.values() if camper.Estado == 'Aprobado']
    if campers_aprobados:
        print("Campers que aprobaron el examen inicial:")
        for camper in campers_aprobados:
            print(camper)
    else:
        print("No hay campers que hayan aprobado el examen inicial.")

def listar_campers_bajo_rendimiento(campers):
    campers_bajo_rendimiento = [camper for camper in campers.values() if camper.Estado == 'Reprobado']
    if campers_bajo_rendimiento:
        print("Campers con bajo rendimiento:")
        for camper in campers_bajo_rendimiento:
            print(camper)
    else:
        print("No hay campers con bajo rendimiento.")

def listar_entrenadores_campuslands(campers):
    entrenadores_campuslands = set()
    for camper in campers.values():
        if camper.Estado != 'Inscrito':
            entrenadores_campuslands.add((camper.Nombre, camper.Apellidos))
    if entrenadores_campuslands:
        print("Entrenadores trabajando con CampusLands:")
        for nombre, apellidos in entrenadores_campuslands:
            print(f"{nombre} {apellidos}")
    else:
        print("No hay entrenadores trabajando con CampusLands.")

def listar_campers_trainers_ruta(campers):
    ruta = input("Ingrese la ruta de entrenamiento (NodeJS, Java, NetCore) que desea consultar: ").lower()
    while ruta not in ["nodejs", "java", "netcore"]:
        print("Ruta de entrenamiento no válida. Por favor ingrese una de las opciones disponibles.")
        ruta = input("Ingrese la ruta de entrenamiento (NodeJS, Java, NetCore): ").lower()
    
    campers_ruta = [camper for camper in campers.values() if camper.Ruta == ruta]
    if campers_ruta:
        print(f"Campers asociados a la ruta de entrenamiento {ruta}:")
        for camper in campers_ruta:
            print(camper)
    else:
        print(f"No hay campers asociados a la ruta de entrenamiento {ruta}.")

def mostrar_aprobados_perdidos(campers):
    modulos = ['Examen Inicial', 'Módulo 1', 'Módulo 2']
    
    for modulo in modulos:
        campers_aprobados = [camper for camper in campers.values() if camper.Estado == 'Aprobado' and modulo in camper.Ruta]
        campers_perdidos = [camper for camper in campers.values() if camper.Estado == 'Reprobado' and modulo in camper.Ruta]
        
        print(f"\n{modulo}:")
        print(f"Número de campers que aprobaron: {len(campers_aprobados)}")
        print(f"Número de campers que perdieron: {len(campers_perdidos)}")

def main():
    campers = cargar_campers_json()
    rutas_ocupadas = {ruta: 0 for ruta in ["nodejs", "java", "netcore"]}
    trainers = {
        "trainer1": Trainer("Trainer", "1", ["nodejs"]),
        "trainer2": Trainer("Trainer", "2", ["java"]),
        "trainer3": Trainer("Trainer", "3", ["netcore"])
    }

    while True:
        print("\n---Menú Principal---")
        print("1. Camper")
        print("2. Trainer")
        print("3. Coordinador")
        print("4. Guardar y salir")
        
        opcion = int(input("Ingrese el número de la opción que desea realizar: "))
        
        if opcion == 1:
            nuevo_camper = capturar_datos_camper(campers, rutas_ocupadas)
            if nuevo_camper:
                campers[nuevo_camper.NumId] = nuevo_camper
        elif opcion == 2:
            menu_trainer(campers)
        elif opcion == 3:
            menu_coordinador(campers)
        elif opcion == 4:
            guardar_campers_json(campers)
            print("Datos guardados exitosamente. ¡Hasta luego!")
            break
        else:
            print("Opción no válida. Por favor ingrese una opción válida.")

if __name__ == "__main__":
    main()
